Учитывая вашу структуру таблицы orders, вижу, что ваша таблица уже объединяет информацию о самом заказе и деталях заказа (продуктах и их количестве). Значит, отдельная таблица order_items вам не нужна, и данные можно получить напрямую из таблицы orders.

Давайте построим SQL-запрос, который выберет нужные данные исходя из данной структуры.

Ваша структура таблицы orders:

order_id: Уникальный идентификатор заказа.
user_id: Идентификатор пользователя, совершившего покупку.
product_name: Название продукта.
quantity: Количество товара.
total_price: Общая стоимость заказа.
create_at: Дата создания заказа.
status_id: Внешний ключ на таблицу статусов заказов.

Задача:

Нужно выбрать историю заказов для текущего пользователя, объединив данные из таблицы orders и таблицы статусов order_status, и вернуть результат в нужном формате.

SQL-запрос:

Теперь составим SQL-запрос, соответствующий вашему дизайну:

with get_db_connection() as conn:
    cur = conn.cursor()
    cur.execute("""
        SELECT o.order_id, o.product_name, o.quantity, o.total_price, o.create_at, os.status_name
        FROM orders o
        INNER JOIN order_status os ON o.status_id = os.status_id
        WHERE o.user_id = %s
        ORDER BY o.create_at DESC
    """, (session["user_id"],))
    results = cur.fetchall()

Анализ результата:

Результатом запроса будет список заказов с такими данными:

Номер заказа (order_id)
Название товара (product_name)
Количество товара (quantity)
Общая стоимость заказа (total_price)
Дата создания заказа (create_at)
Текущий статус заказа (status_name)

Преобразование данных для шаблона:

Далее преобразуем полученный результат в нужный формат для передачи в шаблон:

orders_data = [
    {
        "order_id": row[0],
        "product_name": row[1],
        "quantity": row[2],
        "total_price": row[3],
        "create_at": row[4].strftime('%Y-%m-%d'),  # Форматируем дату
        "status": row[5]
    }
    for row in results
]

Ваш финальный обработчик /orders:

@app.route('/orders', methods=['GET'])
def get_orders():
    # Проверяем, залогинен ли пользователь
    if not session.get("logged_in"):
        flash('Вы должны войти в систему.', 'warning')
        return redirect(url_for('login'))

    # Получаем историю заказов из базы данных
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT o.order_id, o.product_name, o.quantity, o.total_price, o.create_at, os.status_name
            FROM orders o
            INNER JOIN order_status os ON o.status_id = os.status_id
            WHERE o.user_id = %s
            ORDER BY o.create_at DESC
        """, (session["user_id"],))
        results = cur.fetchall()

    # Преобразуем данные в удобный формат для шаблона
    orders_data = [
        {
            "order_id": row[0],
            "product_name": row[1],
            "quantity": row[2],
            "total_price": row[3],
            "create_at": row[4].strftime('%Y-%m-%d'),
            "status": row[5]
        }
        for row in results
    ]

    return render_template('orders.html', orders=orders_data)

Шаблон orders.html:

Модифицируйте шаблон для отображения данных о заказах:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>История заказов</title>
    <link rel="stylesheet" href="../css/orders.css">
</head>
<body>
    <h1>История ваших заказов</h1>
    <table id="orders-table">
        <thead>
            <tr>
                <th>Номер заказа</th>
                <th>Продукт</th>
                <th>Количество</th>
                <th>Стоимость</th>
                <th>Дата заказа</th>
                <th>Статус</th>
            </tr>
        </thead>
        <tbody>
            {% for order in orders %}
                <tr>
                    <td>{{ order.order_id }}</td>
                    <td>{{ order.product_name }}</td>
                    <td>{{ order.quantity }}</td>
                    <td>{{ "%0.2f" | format(order.total_price) }} руб.</td>
                    <td>{{ order.create_at }}</td>
                    <td>{{ order.status }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>

Итог:

Теперь ваши данные аккуратно отображаются в таблице, и страница истории заказов готова к использованию. Главное — проверьте правильность имен полей и таблиц в запросе, чтобы он соответствовал вашей реальной схеме базы данных.